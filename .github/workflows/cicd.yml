run-name: ${{ inputs.comment }} [${{ github.ref_name }} ref] ${{ inputs.application }} - ${{ inputs.environment }} by @${{ github.actor }}
name: CI/CD
on:
  workflow_dispatch:
    inputs:
      application:
        description: 'Application for deploy'
        required: true
        default: x10archery-be
        type: choice
        options:
          - x10archery-be
      environment:
        type: environment
        required: true
        description: 'environment to deploy, for prod use workflow from tags'
        default: development
      comment:
        description: "comment"
        required: true
        default: "usefull information"
        type: string

defaults:
  run:
    working-directory: ./

env:
  HELM_EXPERIMENTAL_OCI: 1
  DEFAULT_VERSION_CHART: "0.0.0"

jobs:
  check_enviroment:
    runs-on: 'ubuntu-latest'
    if: ${{ always() && !(contains(needs.*.result, 'failure')) && !cancelled() }}
    outputs:
      status: ${{ join(steps.*.conclusion) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - id: step_development
        name: Development
        if: ${{ inputs.environment == 'development' && github.ref_type != 'tag' }}
        run: |
          echo "Branch [${GITHUB_REF##*/}] would be deployed to [${{ inputs.environment }}]" >> "$GITHUB_STEP_SUMMARY"
          exit 0

      - id: step_production
        name: Production
        if: ${{ inputs.environment == 'production' && github.ref_type == 'tag' }}
        run: |
          echo "Branch [${GITHUB_REF##*/}] would be deployed to [${{ inputs.environment }}]" >> "$GITHUB_STEP_SUMMARY"
          exit 0

      - name: Fail
        if: steps.step_development.conclusion == 'skipped' && steps.step_production.conclusion == 'skipped'
        run: |
          echo "Deploy failed! Production includes only tagged versions, development excludes tagged versions!" >> "$GITHUB_STEP_SUMMARY"
          exit 1

  image_build_and_push:
    runs-on: 'ubuntu-latest'
    if: ${{ always() && !(contains(needs.*.result, 'failure')) && !cancelled() }}
    outputs:
      short_sha: ${{ steps.short_sha_step.outputs.sha }}
      image_version: ${{ steps.set_image_version.outputs.image_version }}
    needs:
      - check_enviroment
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Log in to [Harbor]
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.HARBOR_HOST }}
          username: ${{ vars.HARBOR_ROBOT_NAME }}
          password: ${{ secrets.HARBOR_ROBOT_TOKEN }}

      - name: Get short sha
        uses: benjlevesque/short-sha@v2.1
        id: short_sha_step
        with:
          length: 7

      - name: Set [short_sha] in [GITHUB_OUTPUT]
        run: |
          echo "short_sha=${{ steps.short_sha_step.outputs.sha }}" >> $GITHUB_ENV
          echo "sha=${{ steps.short_sha_step.outputs.sha }}" >> $GITHUB_OUTPUT
          echo "short_sha set up to [${{ steps.short_sha_step.outputs.sha }}]" >> "$GITHUB_STEP_SUMMARY"

      - name: Build and push Docker image [Development version]
        if: ${{ inputs.environment == 'development' && github.ref_type != 'tag' }}
        uses: docker/build-push-action@v4
        with:
          context: .
          build-args: |
            "SHA_COMMIT=${{ env.short_sha }}"
            "BRANCH_NAME=${{ github.ref_name }}"
          push: true
          tags: ${{ vars.HARBOR_HOST }}/${{ vars.HARBOR_PROJECT_NAME }}/${{ vars.APPLICATION_NAME }}:${{ env.short_sha }}-dev, ${{ vars.HARBOR_HOST }}/${{ vars.HARBOR_PROJECT_NAME }}/${{ vars.APPLICATION_NAME }}:latest-dev

      - name: Build and push Docker image [Production version]
        if: ${{ inputs.environment == 'production' && github.ref_type == 'tag' }}
        uses: docker/build-push-action@v4
        with:
          context: .
          build-args: |
            "SHA_COMMIT=${{ env.short_sha }}"
            "VERSION_TAG=${{ github.ref_name }}"
          push: true
          tags: ${{ vars.HARBOR_HOST }}/${{ vars.HARBOR_PROJECT_NAME }}/${{ vars.APPLICATION_NAME }}:${{ github.ref_name }}, ${{ vars.HARBOR_HOST }}/${{ vars.HARBOR_PROJECT_NAME }}/${{ vars.APPLICATION_NAME }}:latest

      - name: Print image version
        id: set_image_version
        run: |
          if [[ "${{ inputs.environment }}" == "production" && "${{ github.ref_type }}" == "tag" ]]; then
            echo "image_version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "Image [${{ inputs.environment }}] version is [${{ github.ref_name }}]" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "image_version=${{ env.short_sha }}-dev" >> $GITHUB_OUTPUT
            echo "Image [${{ inputs.environment }}] version is [${{ env.short_sha }}-dev]" >> "$GITHUB_STEP_SUMMARY"
          fi
